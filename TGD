
# Dosya yolu
file_path = "/Users/lemannur/Desktop/clusters_gene_expression_summary/Tgd_gene_comparison.xlsx"

# Excel dosyasını oku
df = pd.read_excel(file_path)

# İlk birkaç satırı göster
print(df.head())
#############
# 1. Category sütunundaki benzersiz değerleri bul
categories = df['Category'].unique()
print("Categories:", categories)

# Common kategorisine ait genleri al
Tgd_commons = df[df['Category'] == 'Common']

# Only_Cluster_2 kategorisine ait genleri al
Tgd_cluster2 = df[df['Category'] == 'Only_Cluster_2']

# Only_Cluster_3 kategorisine ait genleri al
Tgd_cluster3 = df[df['Category'] == 'Only_Cluster_3']

print("Tgd_commons length:", len(Tgd_commons))
print("Tgd_cluster2 length:", len(Tgd_cluster2))
print("Tgd_cluster3 length:", len(Tgd_cluster3))

########################


# Dosya yolları
file_path_3 = "/Users/lemannur/Desktop/clusters_gene_statistics_filtered/filtered_Tgd_cluster_3_stats.xlsx"
file_path_2 = "/Users/lemannur/Desktop/clusters_gene_statistics_filtered/filtered_Tgd_cluster_2_stats.xlsx"
# Excel dosyalarını oku ve isimlerini koruyarak DataFrame olarak ata
filtered_Tgd_cluster_3_stats = pd.read_excel(file_path_3)
filtered_Tgd_cluster_2_stats = pd.read_excel(file_path_2)

# Kontrol amaçlı ilk birkaç satırı yazdır
print("Cluster 3 Stats Preview:")
print(filtered_Tgd_cluster_3_stats.head())
print("\nCluster 2 Stats Preview:")
print(filtered_Tgd_cluster_2_stats.head())

###########

#############
Tgd_cluster2 = Tgd_cluster2.merge(
    filtered_Tgd_cluster_2_stats[['genes', 'mean_expression', 'median_expression']],
    left_on='Gene', right_on='genes',
    how='left'
)

Tgd_cluster3 = Tgd_cluster3.merge(
    filtered_Tgd_cluster_3_stats[['genes', 'mean_expression', 'median_expression']],
    left_on='Gene', right_on='genes',
    how='left'
)

print(Tgd_cluster2.columns)
print(Tgd_cluster3.columns)
###############

# Önce Cluster 2'den mean ve median ekleyelim
Tgd_commons = Tgd_commons.merge(
    filtered_Tgd_cluster_2_stats[['genes', 'mean_expression', 'median_expression']],
    left_on='Gene', right_on='genes',
    how='left'
).rename(columns={
    'mean_expression': 'mean_expression_cluster2',
    'median_expression': 'median_expression_cluster2'
})

# 'genes' sütunu merge'den geldiği için tekrar eden sütunu silelim
Tgd_commons.drop(columns=['genes'], inplace=True)

##################
# Şimdi Cluster 3'ten mean ve median ekleyelim
Tgd_commons = Tgd_commons.merge(
    filtered_Tgd_cluster_3_stats[['genes', 'mean_expression', 'median_expression']],
    left_on='Gene', right_on='genes',
    how='left'
).rename(columns={
    'mean_expression': 'mean_expression_cluster3',
    'median_expression': 'median_expression_cluster3'
})

# Yine gereksiz 'genes' sütununu kaldıralım
Tgd_commons.drop(columns=['genes'], inplace=True)
print(Tgd_commons.columns)

##################

##############
# Mean expression değerlerinin maksimum ve minimumunu yazdır
print("Mean expression cluster2 (max):", Tgd_cluster2['mean_expression'].max())
print("Mean expression cluster2 (min):", Tgd_cluster2['mean_expression'].min())

# Median expression değerlerinin maksimum ve minimumunu yazdır
print("Median expression cluster2 (max):", Tgd_cluster2['median_expression'].max())
print("Median expression cluster2 (min):", Tgd_cluster2['median_expression'].min())

# Mean expression değerlerinin maksimum ve minimumunu yazdır
print("Mean expression cluster 3 (max):", Tgd_cluster3['mean_expression'].max())
print("Mean expression cluster 3 (min):", Tgd_cluster3['mean_expression'].min())

# Median expression değerlerinin maksimum ve minimumunu yazdır
print("Median expression cluster 3 (max):", Tgd_cluster3['median_expression'].max())
print("Median expression cluster 3 (min):", Tgd_cluster3['median_expression'].min())
###################

import pandas as pd
import matplotlib.pyplot as plt

# Güncel verilerle DataFrame oluşturma
data = {
    "Source": [
        "Tgd_cluster2",
        "Tgd_cluster3",
        "Tgd_commons (cluster2)",
        "Tgd_commons (cluster3)"
    ],
    # Mean değerleri
    "Mean_Min": [
        0.5246893866661596,
        0.5945431072245256,
        0.5246893866661596,
        0.5945431072245256
    ],
    "Mean_Max": [
        2.640932415255796,
        2.684664122522745,
        2.640932415255796,
        2.684664122522745
    ],
    # Median değerleri
    "Median_Min": [
        0.4512459032315885,
        0.571913169413371,
        0.4512459032315885,
        0.571913169413371
    ],
    "Median_Max": [
        2.706732046101905,
        2.80450510859893,
        2.706732046101905,
        2.80450510859893
    ]
}

df = pd.DataFrame(data)

# Sonucu göster
print(df)

# Bar plot
x = range(len(df))
width = 0.35

plt.figure(figsize=(10, 6))
plt.bar([i - width/2 for i in x], df["Mean_Min"], width=width, label='Mean Min')
plt.bar([i + width/2 for i in x], df["Mean_Max"], width=width, label='Mean Max')

plt.xticks(ticks=x, labels=df["Source"], rotation=20)
plt.ylabel("Mean Expression")
plt.title("Min and Max Mean Expression per Group (Tgd)")
plt.legend()
plt.tight_layout()
plt.show()

########################

# Tgd_cluster2 içindeki mean_expression sütununun ortalaması
mean_Tgd_cluster2 = Tgd_cluster2['mean_expression'].mean()
print("Mean of Tgd_cluster2:", mean_Tgd_cluster2)

# Tgd_cluster3 içindeki mean_expression sütununun ortalaması
mean_Tgd_cluster3 = Tgd_cluster3['mean_expression'].mean()
print("Mean of Tgd_cluster3:", mean_Tgd_cluster3)

# Tgd_commons içindeki mean_expression_cluster2 ve mean_expression_cluster3 ortalamaları
mean_Tgd_common_cluster2 = Tgd_commons['mean_expression_cluster2'].mean()
mean_Tgd_common_cluster3 = Tgd_commons['mean_expression_cluster3'].mean()
print("Mean of Tgd_commons (cluster2):", mean_Tgd_common_cluster2)
print("Mean of Tgd_commons (cluster3):", mean_Tgd_common_cluster3)

# Tgd_cluster2 içindeki median_expression sütununun ortalaması
median_Tgd_cluster2 = Tgd_cluster2['median_expression'].mean()
print("Median (mean value) of Tgd_cluster2:", median_Tgd_cluster2)

# Tgd_cluster3 içindeki median_expression sütununun ortalaması
median_Tgd_cluster3 = Tgd_cluster3['median_expression'].mean()
print("Median (mean value) of Tgd_cluster3:", median_Tgd_cluster3)

# Tgd_commons içindeki median_expression_cluster2 ve median_expression_cluster3 ortalamaları
median_Tgd_common_cluster2 = Tgd_commons['median_expression_cluster2'].mean()
median_Tgd_common_cluster3 = Tgd_commons['median_expression_cluster3'].mean()
print("Median (mean value) of Tgd_commons (cluster2):", median_Tgd_common_cluster2)
print("Median (mean value) of Tgd_commons (cluster3):", median_Tgd_common_cluster3)

# Tgd_cluster2
std_mean_Tgd_cluster2 = Tgd_cluster2['mean_expression'].std()
std_median_Tgd_cluster2 = Tgd_cluster2['median_expression'].std()

# Tgd_cluster3
std_mean_Tgd_cluster3 = Tgd_cluster3['mean_expression'].std()
std_median_Tgd_cluster3 = Tgd_cluster3['median_expression'].std()

# Tgd_commons (hem cluster2 hem cluster3 değerleri)
std_mean_Tgd_common_cluster2 = Tgd_commons['mean_expression_cluster2'].std()
std_median_Tgd_common_cluster2 = Tgd_commons['median_expression_cluster2'].std()

std_mean_Tgd_common_cluster3 = Tgd_commons['mean_expression_cluster3'].std()
std_median_Tgd_common_cluster3 = Tgd_commons['median_expression_cluster3'].std()

# Sonuçları yazdır
print("STD - Tgd_cluster2 | Mean:", std_mean_Tgd_cluster2, "| Median:", std_median_Tgd_cluster2)
print("STD - Tgd_cluster3 | Mean:", std_mean_Tgd_cluster3, "| Median:", std_median_Tgd_cluster3)
print("STD - Tgd_commons (cluster2) | Mean:", std_mean_Tgd_common_cluster2, "| Median:", std_median_Tgd_common_cluster2)
print("STD - Tgd_commons (cluster3) | Mean:", std_mean_Tgd_common_cluster3, "| Median:", std_median_Tgd_common_cluster3)

##################
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = {
    'Metric': ['Mean', 'Mean', 'Mean', 'Mean',
               'Median', 'Median', 'Median', 'Median',
               'STD Mean', 'STD Mean', 'STD Mean', 'STD Mean',
               'STD Median', 'STD Median', 'STD Median', 'STD Median'],
    'Group': ['Tgd_cluster2', 'Tgd_cluster3', 'Tgd_commons_c2', 'Tgd_commons_c3'] * 4,
    'Value': [
        # Mean values
        1.259549973559172, 1.198761558474836, 2.1165787534179126, 2.129207218071445,
        # Median values
        1.2622654652500473, 1.1930412114276996, 2.1295178877737424, 2.1461830565910027,
        # STD of Mean
        0.36428949718282916, 0.3441237453545929, 0.6703317819563012, 0.6823016370613767,
        # STD of Median
        0.3832512390987532, 0.3679185534703312, 0.670180530346398, 0.6872238542598537
    ]
}

df = pd.DataFrame(data)

# Görselleştirme: Barplot
plt.figure(figsize=(12, 6))
sns.barplot(data=df, x='Group', y='Value', hue='Metric')
plt.title('Tgd Feature Statistics by Cluster')
plt.ylabel('Value')
plt.ylim(0, 3.8)
plt.legend(title='Metric')
plt.tight_layout()
plt.show()

######################

import pandas as pd
import matplotlib.pyplot as plt

data = {
    "Group": [
        "Tgd_cluster2", "Tgd_cluster3",
        "Tgd_commons (cluster2)", "Tgd_commons (cluster3)"
    ],
    "Mean": [
        1.259549973559172, 1.198761558474836,
        2.1165787534179126, 2.129207218071445
    ],
    "Median": [
        1.2622654652500473, 1.1930412114276996,
        2.1295178877737424, 2.1461830565910027
    ],
    "STD (Mean)": [
        0.36428949718282916, 0.3441237453545929,
        0.6703317819563012, 0.6823016370613767
    ],
    "STD (Median)": [
        0.3832512390987532, 0.3679185534703312,
        0.670180530346398, 0.6872238542598537
    ]
}

df = pd.DataFrame(data)
print(df)

# Grafik çizimi
plt.figure(figsize=(12, 6))
x = range(len(df))

# Ortalama değerler (Mean ve Median)
plt.bar([i - 0.2 for i in x], df["Mean"], width=0.2, label="Mean", color="skyblue")
plt.bar([i for i in x], df["Median"], width=0.2, label="Median", color="lightgreen")

# Hata barları (standart sapma)
plt.errorbar([i - 0.2 for i in x], df["Mean"], yerr=df["STD (Mean)"], fmt='o', color='blue', capsize=5)
plt.errorbar([i for i in x], df["Median"], yerr=df["STD (Median)"], fmt='o', color='green', capsize=5)

# Etiketler ve düzenlemeler
plt.xticks(ticks=x, labels=df["Group"], rotation=15)
plt.ylabel("Expression Level")
plt.title("Mean and Median Expression Levels with Standard Deviation")
plt.legend()
plt.tight_layout()
plt.show()

##################


# Dosya yolları
file_path_cluster2 = "/Users/lemannur/Desktop/Team EIT Modeling Article : Dry Lab/data&cluster information/Tgd_cluster_2.xlsx"
file_path_cluster3 = "/Users/lemannur/Desktop/Team EIT Modeling Article : Dry Lab/data&cluster information/Tgd_cluster_3.xlsx"

# Excel dosyalarını oku
Tgd_cluster2_raw = pd.read_excel(file_path_cluster2)
Tgd_cluster3_raw = pd.read_excel(file_path_cluster3)
###############

# Kontrol amaçlı ilk birkaç satırı yazdır
print("Tgd_cluster2_raw preview:")
print(Tgd_cluster2_raw.head())

print("\nTgd_cluster3_raw preview:")
print(Tgd_cluster3_raw.head())

######################

# Tgd_cluster2 içindeki gen isimlerini liste olarak al
selected_genes = Tgd_cluster2['Gene'].tolist()
len(selected_genes)

# Bu genlere karşılık gelen satırları Tgd_cluster2_raw içinden filtrele
Tgd_cluster2_expr = Tgd_cluster2_raw[Tgd_cluster2_raw['genes'].isin(selected_genes)]

# İlk birkaç satırı göster
print(Tgd_cluster2_expr.head())

####################

##############
# Tgd_cluster3 içindeki gen isimlerini liste olarak al
selected_genes_3 = Tgd_cluster3['Gene'].tolist()
len(selected_genes_3)

# Bu genlere karşılık gelen satırları Tgd_cluster3_raw içinden filtrele
Tgd_cluster3_expr = Tgd_cluster3_raw[Tgd_cluster3_raw['genes'].isin(selected_genes_3)]

# İlk birkaç satırı göster
print(Tgd_cluster3_expr.head())

##############

############
# Tgd_commons içindeki gen isimlerini liste olarak al
common_genes = Tgd_commons['Gene'].tolist()

# Bu genlere karşılık gelen satırları Tgd_cluster2_raw içinden filtrele
Tgd_commons_expr_cluster2 = Tgd_cluster2_raw[Tgd_cluster2_raw['genes'].isin(common_genes)]

# İlk birkaç satırı yazdır
print(Tgd_commons_expr_cluster2.head())

##################

#############
# Bu genlere karşılık gelen satırları Tgd_cluster3_raw içinden filtrele
Tgd_commons_expr_cluster3 = Tgd_cluster3_raw[Tgd_cluster3_raw['genes'].isin(common_genes)]

# İlk birkaç satırı yazdır
print(Tgd_commons_expr_cluster3.head())

################

import pandas as pd
from scipy.stats import mannwhitneyu
from statsmodels.stats.multitest import multipletests

# Ortak genleri alalım
common_genes = set(Tgd_commons_expr_cluster2['genes']).intersection(set(Tgd_commons_expr_cluster3['genes']))

# Sonuçları saklamak için liste
results = []

# Her ortak gen için test yapalım
for gene in common_genes:
    # İlgili satırı al
    expr_cluster2 = Tgd_commons_expr_cluster2[Tgd_commons_expr_cluster2['genes'] == gene].iloc[:, 1:].values.flatten()
    expr_cluster3 = Tgd_commons_expr_cluster3[Tgd_commons_expr_cluster3['genes'] == gene].iloc[:, 1:].values.flatten()

    # Mann-Whitney U testi
    stat, p = mannwhitneyu(expr_cluster2, expr_cluster3, alternative='two-sided')

    # Sonuçları kaydet
    results.append({'gene': gene, 'U_statistic': stat, 'p_value': p})

# Sonuçları DataFrame’e çevir
results_df = pd.DataFrame(results)

# İsteğe bağlı: p-değerine göre sırala
results_df = results_df.sort_values('p_value')

# İlk 5 sonucu göster
print(results_df.head())

# FDR düzeltmesi (Benjamini-Hochberg yöntemi)
_, adj_pvals, _, _ = multipletests(results_df['p_value'], method='fdr_bh')

# Yeni sütun olarak ekle
results_df['adj_p_value'] = adj_pvals

# adj_p_value'a göre sırala
results_df = results_df.sort_values('adj_p_value')

# Sonuçları göster
print(results_df.head())

# Excel'e kaydet
results_df.to_excel("mannwhitney_results.xlsx", index=False)

##############
###########
# Kontrol amaçlı ifade sayısını yazdırıyorum:

print(Tgd_cluster2_expr.shape[0])
print(Tgd_cluster3_expr.shape[0])
#################



# Dosya yolu
file_path = "/Users/lemannur/Desktop/Team EIT Modeling Article : Dry Lab/data&cluster information/Aggregated_log2Exp_Tgd.xlsx"

# Excel dosyasını oku
df = pd.read_excel(file_path)

# İlk birkaç satırı kontrol et
print(df.head())

####################



##########

#cluster_2 icin:
from scipy.stats import mannwhitneyu

# Seçilen genler için her birinde test yap
results = {}
for gene in selected_genes:
    # Genin ekspresyon değerlerini al
    expr_cluster2 = df[df["genes"] == gene][cluster_2_libraries].values.flatten()
    expr_cluster3 = df[df["genes"] == gene][cluster_3_libraries].values.flatten()

    # Mann-Whitney U testi
    stat, p_value = mannwhitneyu(expr_cluster2, expr_cluster3, alternative='two-sided')

    # Sonuçları kaydet
    results[gene] = {
        "statistic": stat,
        "p_value": p_value,
        "significant": p_value < 0.05  # 0.05 eşik değeri
    }

# Sonuçları DataFrame'e çevir
results_df = pd.DataFrame(results).T
print(results_df)

#results_df.to_csv("mannwhitney_results.csv", index=False)
#results_df.to_excel("mannwhitney_results.xlsx", index=False, sheet_name="Test_Results")
#print("Sonuçlar 'mannwhitney_results.csv' olarak kaydedildi!")

# Gen isimlerini indeksten sütuna al
results_df = results_df.reset_index().rename(columns={'index': 'Gene'})

# Excel'e kaydet
results_df.to_excel("mannwhitney_results_with_genes.xlsx", index=False)

#####################



#####################
####iki colmn icin error aliyorum, o yuzden yeni kod::
########
from scipy.stats import mannwhitneyu

# Hatalı kolonları dışla
valid_cluster_3_libraries = [col for col in cluster_3_libraries if col in df.columns]
valid_cluster_2_libraries = [col for col in cluster_2_libraries if col in df.columns]

# Seçilen genler için her birinde test yap
results = {}
for gene in selected_genes:
    try:
        expr_cluster2 = df[df["genes"] == gene][valid_cluster_2_libraries].values.flatten()
        expr_cluster3 = df[df["genes"] == gene][valid_cluster_3_libraries].values.flatten()

        # Mann-Whitney U testi
        stat, p_value = mannwhitneyu(expr_cluster2, expr_cluster3, alternative='two-sided')

        # Sonuçları kaydet
        results[gene] = {
            "statistic": stat,
            "p_value": p_value,
            "significant": p_value < 0.05  # 0.05 eşik değeri
        }
    except Exception as e:
        print(f"{gene} için hata oluştu: {e}")
        continue

# Sonuçları DataFrame'e çevir
results_df = pd.DataFrame(results).T
results_df = results_df.reset_index().rename(columns={'index': 'Gene'})

# Excel'e kaydet
results_df.to_excel("mannwhitney_results_with_genes.xlsx", index=False)

print("Analiz tamamlandı, sonuçlar 'mannwhitney_results_with_genes.xlsx' dosyasına kaydedildi.")

#########

#######

#cluster 3 icin"

#####################
####iki colmn icin error aliyorum, o yuzden yeni kod::
########
from scipy.stats import mannwhitneyu

# Hatalı kolonları dışla
valid_cluster_3_libraries = [col for col in cluster_3_libraries if col in df.columns]
valid_cluster_2_libraries = [col for col in cluster_2_libraries if col in df.columns]

# Seçilen genler için her birinde test yap
results = {}
for gene in selected_genes_3:
    try:
        expr_cluster2 = df[df["genes"] == gene][valid_cluster_2_libraries].values.flatten()
        expr_cluster3 = df[df["genes"] == gene][valid_cluster_3_libraries].values.flatten()

        # Mann-Whitney U testi
        stat, p_value = mannwhitneyu(expr_cluster2, expr_cluster3, alternative='two-sided')

        # Sonuçları kaydet
        results[gene] = {
            "statistic": stat,
            "p_value": p_value,
            "significant": p_value < 0.05  # 0.05 eşik değeri
        }
    except Exception as e:
        print(f"{gene} için hata oluştu: {e}")
        continue

# Sonuçları DataFrame'e çevir
results_df = pd.DataFrame(results).T
results_df = results_df.reset_index().rename(columns={'index': 'Gene'})

# Excel'e kaydet
results_df.to_excel("mannwhitney_results_with_genes.xlsx", index=False)

print("Analiz tamamlandı, sonuçlar 'mannwhitney_results_with_genes.xlsx' dosyasına kaydedildi.")

#########
